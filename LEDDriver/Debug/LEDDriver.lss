
LEDDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000152  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000881  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000721  00000000  00000000  00000af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f5  00000000  00000000  0000121a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001510  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000432  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000023d  00000000  00000000  00001986  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001bc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e5       	ldi	r30, 0x52	; 82
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  8e:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_Z12writeWordOutj>:
};

void writeWordOut(uint16_t byteToWrite) {
	
	// Setting the DATA and CLOCK lines low
	PORTB &= !(DATA | CLOCK);
  96:	25 b1       	in	r18, 0x05	; 5
  98:	15 b8       	out	0x05, r1	; 5
  9a:	20 e0       	ldi	r18, 0x00	; 0
  9c:	30 e0       	ldi	r19, 0x00	; 0
	
	for (uint8_t n = 0; n < 16; n++) {
		
		// Setting the data pin high or low depending on the bit state
		(byteToWrite & (1 << n)) ? (PORTB |= DATA) : (PORTB &= !DATA);
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	70 e0       	ldi	r23, 0x00	; 0
  a2:	ab 01       	movw	r20, r22
  a4:	02 2e       	mov	r0, r18
  a6:	02 c0       	rjmp	.+4      	; 0xac <_Z12writeWordOutj+0x16>
  a8:	44 0f       	add	r20, r20
  aa:	55 1f       	adc	r21, r21
  ac:	0a 94       	dec	r0
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <_Z12writeWordOutj+0x12>
  b0:	48 23       	and	r20, r24
  b2:	59 23       	and	r21, r25
  b4:	45 2b       	or	r20, r21
  b6:	11 f0       	breq	.+4      	; 0xbc <_Z12writeWordOutj+0x26>
  b8:	2b 9a       	sbi	0x05, 3	; 5
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <_Z12writeWordOutj+0x2a>
  bc:	45 b1       	in	r20, 0x05	; 5
  be:	15 b8       	out	0x05, r1	; 5
		
		// Clock the data in
		PORTB |= CLOCK;
  c0:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	45 e3       	ldi	r20, 0x35	; 53
  c4:	4a 95       	dec	r20
  c6:	f1 f7       	brne	.-4      	; 0xc4 <_Z12writeWordOutj+0x2e>
  c8:	00 00       	nop
		_delay_us(10);
		PORTB &= !CLOCK;
  ca:	45 b1       	in	r20, 0x05	; 5
  cc:	15 b8       	out	0x05, r1	; 5
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
void writeWordOut(uint16_t byteToWrite) {
	
	// Setting the DATA and CLOCK lines low
	PORTB &= !(DATA | CLOCK);
	
	for (uint8_t n = 0; n < 16; n++) {
  d2:	20 31       	cpi	r18, 0x10	; 16
  d4:	31 05       	cpc	r19, r1
  d6:	29 f7       	brne	.-54     	; 0xa2 <_Z12writeWordOutj+0xc>
		PORTB &= !CLOCK;
		
	}
	
	// Refresh the output
	PORTB |= REFRESH;
  d8:	29 9a       	sbi	0x05, 1	; 5
  da:	85 e0       	ldi	r24, 0x05	; 5
  dc:	8a 95       	dec	r24
  de:	f1 f7       	brne	.-4      	; 0xdc <_Z12writeWordOutj+0x46>
  e0:	00 00       	nop
	_delay_us(1);
	PORTB &= !REFRESH;
  e2:	85 b1       	in	r24, 0x05	; 5
  e4:	15 b8       	out	0x05, r1	; 5
  e6:	08 95       	ret

000000e8 <main>:
	
}

int main(void) {	
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	00 d0       	rcall	.+0      	; 0xee <main+0x6>
  ee:	00 d0       	rcall	.+0      	; 0xf0 <main+0x8>
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
	
	DDRB = CLOCK | DATA | REFRESH; // Set direction of port B
  f4:	8e e0       	ldi	r24, 0x0E	; 14
  f6:	84 b9       	out	0x04, r24	; 4
		0b1110111000010000
	};
	
	char message[] = {
		'R', 'O', 'R', 'Y'
	};
  f8:	82 e5       	ldi	r24, 0x52	; 82
  fa:	89 83       	std	Y+1, r24	; 0x01
  fc:	9f e4       	ldi	r25, 0x4F	; 79
  fe:	9a 83       	std	Y+2, r25	; 0x02
 100:	8b 83       	std	Y+3, r24	; 0x03
 102:	89 e5       	ldi	r24, 0x59	; 89
 104:	8c 83       	std	Y+4, r24	; 0x04
    while (1) {		
		
		for (uint8_t i = 0; i < sizeof(message); i++) {
			uint16_t letter = chars[(int)message[i] - 65] << 8;
			uint16_t final = letter | (0b10000000 >> i);
			writeWordOut(final);
 106:	68 94       	set
 108:	cc 24       	eor	r12, r12
 10a:	c7 f8       	bld	r12, 7
 10c:	d1 2c       	mov	r13, r1
 10e:	ce 01       	movw	r24, r28
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	7c 01       	movw	r14, r24
	_delay_us(1);
	PORTB &= !REFRESH;
	
}

int main(void) {	
 114:	00 e0       	ldi	r16, 0x00	; 0
 116:	10 e0       	ldi	r17, 0x00	; 0
	
	// Main loop
    while (1) {		
		
		for (uint8_t i = 0; i < sizeof(message); i++) {
			uint16_t letter = chars[(int)message[i] - 65] << 8;
 118:	d7 01       	movw	r26, r14
 11a:	ed 91       	ld	r30, X+
 11c:	7d 01       	movw	r14, r26
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	e1 54       	subi	r30, 0x41	; 65
 122:	ff 4f       	sbci	r31, 0xFF	; 255
			uint16_t final = letter | (0b10000000 >> i);
			writeWordOut(final);
 124:	20 81       	ld	r18, Z
 126:	c6 01       	movw	r24, r12
 128:	00 2e       	mov	r0, r16
 12a:	02 c0       	rjmp	.+4      	; 0x130 <main+0x48>
 12c:	95 95       	asr	r25
 12e:	87 95       	ror	r24
 130:	0a 94       	dec	r0
 132:	e2 f7       	brpl	.-8      	; 0x12c <main+0x44>
 134:	92 2b       	or	r25, r18
 136:	0e 94 4b 00 	call	0x96	; 0x96 <_Z12writeWordOutj>
 13a:	b5 e0       	ldi	r27, 0x05	; 5
 13c:	ba 95       	dec	r27
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x54>
 140:	00 00       	nop
 142:	0f 5f       	subi	r16, 0xFF	; 255
 144:	1f 4f       	sbci	r17, 0xFF	; 255
	};
	
	// Main loop
    while (1) {		
		
		for (uint8_t i = 0; i < sizeof(message); i++) {
 146:	04 30       	cpi	r16, 0x04	; 4
 148:	11 05       	cpc	r17, r1
 14a:	09 f3       	breq	.-62     	; 0x10e <main+0x26>
 14c:	e5 cf       	rjmp	.-54     	; 0x118 <main+0x30>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
